{
  
    
        "post0": {
            "title": "Primeiros passos com Deep Learning: Keras vs Pytorch",
            "content": ". Quando queremos começar a fazer alguma coisa em Aprendizado Profundo de Máquina ou Deep Learning pode bater aquela dúvida, . por onde eu começo? . E geralmente quando bate essa dúvida ela é direcionada para o que é mais usado para Deep Learning na comunidade de ciência de dados . Keras e PyTorch . Quais são as diferenças entre os dois e por qual começar? Vamos tentar esclarecer essas dúvidas. . Quais s&#227;o as diferen&#231;as entre Keras e PyTorch? . Ambos são estruturas que facilitam o desenvolvimento de implementações de Deep Learning, por isso são chamados de frameworks. Tanto o Keras quando o PyTorch procuram facilitar os processos de: . preparação de dados | construção do modelo | treinamento do modelo | salvamento e reutilização do modelo | teste do modelo | métricas do modelo | . Ambos também fazem isso usando a linguagem Python. E nos dois podemos usar GPUs para processar nossos dados. . Até agora sabemos algumas semelhanças. . Os dois são frameworks, ambos procuram facilitar o ciclo de vida do desenvolvimento de Deep Learning, podemos usá-los com Python e com uma GPU. . O que &#233; o Keras? . O Keras era um projeto de uma pessoa que se chama François Chollet. É possível usar o Keras como uma camada superior que permite acessar partes mais complexas de backends para Deep learning. Até hoje ele se descreve como uma API de Deep Learning. . Ao usar o Keras, é possível escolher como backend: . Theano | Tensorflow | CNTK | . Como o uso do Keras com o Tensorflow foi ficando cada vez mais frequente, o François foi contratado pela Google e cada vez mais o Keras fica unido com o Tensorflow. . Por ser uma camada superior de acesso, muitas vezes se é necessário acessar camadas mais profundas é preciso entender também do backend que está sendo usado. . O que &#233; o PyTorch? . O PyTorch foi desenvolvido por um grupo de pesquisa de inteligência artificial do Facebook chamado FAIR (Facebook Artificial Intelligence Research). No início havia apenas o Torch e depois envolveram o Torch no Python, fazendo um Python wrapper e foi criado o PyTorch. . Diferentemente do Keras, o Pytorch não é uma camada superior que permite que você use diferentes backends, ele é uma mistura de código que facilita o acesso superior às suas camadas mais profundas com código que reflete a necessidade de acesso à essas camadas profundas. . Neste caso, o PyTorch se torna um framework que mistura o alto nível com o baixo nível, sendo high-level e low-level simultaneamente quanto aos acessos de suas camadas. . Come&#231;o por Keras ou por PyTorch? . Depende. . Se considerarmos que o objetivo é o início do aprendizado e que queremos entender como fazemos um modelo de Deep learning, a sugestão é Keras. . O Keras acaba sendo mais popular que o PyTorch por enquanto. . Há mais tutoriais e exemplos de implementações disponíveis na web, escrever o código é mais alto nível, e é o framework mais usado em competições ganhadoras do Kaggle dado a sua praticidade. . E ao ir se aprofundando nos estudos é interessante aprender os backends, então entender o Tensorflow, o Theano, o CNTK. . Podemos ter recomendado o Keras agora, no entanto a comunidade do PyTorch está crescendo e podem acontecer mudanças no futuro. . . Mais informa&#231;&#245;es . O início por Keras é uma sugestão. . Também recomendamos que você teste e faça um exemplo simples com cada um deles e entenda qual flui melhor. . No final, o framework mais legal para você estudar também tem a ver com aquele que você se sente mais confortável usando. . Dê uma olhada nos sites e veja qual lhe parece mais interessante: . Site do Keras . Site do PyTorch . Também há tutoriais para que você tenha uma idéia do que é usar cada um deles: . Tutoriais do Keras . Tutoriais do PyTorch .",
            "url": "https://awarischool.github.io/ds-blog/datascience/keras/pytorch/deep%20learning/2020/07/09/primeiros-passos-keras-vs-pytorch.html",
            "relUrl": "/datascience/keras/pytorch/deep%20learning/2020/07/09/primeiros-passos-keras-vs-pytorch.html",
            "date": " • Jul 9, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Python Cheat Notebook",
            "content": "Comments and print() . # I&#39;m a comment! When there is text after a hashtag, that text does not affect the code. . print(&quot;Hi&quot;) . Hi . Numeric Operations . 5 + 5 #addition . 10 . 5 * 5 #multiplication . 25 . 5 / 5 #division . 1.0 . 5 ** 2 #exponentiation . 25 . 4 % 2 #modulus . 0 . 5 % 2 #modulus . 1 . (5 + 5) * (5 -1) #operations order . 40 . 4/5 #numbers with decimal places are called &quot;float&quot; . 0.8 . Strings (texts) . &#39;I am a string&#39; #you can create a string with single quotes . &#39;I am a string&#39; . &quot;I am also a string&quot; #you can create a string with double quotes . &#39;I am also a string&#39; . &quot;I am a string with &#39;single quotes&#39;&quot; #to use single quotes within the string, the string is created in double quotes. . &#34;I am a string with &#39;single quotes&#39;&#34; . &#39;I am a string with &quot;double quotes&quot;&#39;#to use double quotes inside the string, the string is created in single quotes. . &#39;I am a string with &#34;double quotes&#34;&#39; . print(&quot;I am a string&quot;.title()) # .title() makes the first letter of each word capitalized . I Am A String . print(&quot;I am A string&quot;.lower()) # .lower() makes all letters lowercase . i am a string . print(&quot;i Am a string&quot;.upper()) # .upper() makes all letters capitalized . I AM A STRING . Booleans and Comparison Operators . True #true . True . False #false . False . 1 &gt; 2 # false . False . 1 &lt; 2 # true . True . 10 &gt;= 10 # greater than or equal (true for the condition) . True . 10 &lt;= 40 # less than or equal (true for the condition) . True . 1 == 1 #true . True . &#39;words&#39; == &#39;word&#39; #false . False . &#39;word&#39; == &#39;word&#39; #true . True . Conectivos . (50 &gt; 100) and (100 &lt; 300) # and (both conditions must be satisfied) . False . (10 &gt; 20) or (20 &lt; 30) # or (only one of the conditions needs to be met) . True . (10 == 10.5) or (2 == 3) or (4 == 4) . True . if, elif, else . if 10 &lt; 20: print(&#39;Corret!&#39;) # condition satisfied, the result will be printed . Corret! . if 1 &lt; 2: print(&quot;One is less than two!&quot;) # condition satisfied, the result will be printed . One is less than two! . if 1 &lt; 2: print(&#39;Correct&#39;) # condition satisfied, the result will be printed else: print(&#39;Incorrect&#39;) . Correct . if 1 &gt; 2: print(&#39;Correct&#39;) else: print(&#39;Incorrect&#39;) # condition not satisfied, the &quot;else&quot; result will be printed . Incorrect . if 1 == 2: print(&#39;first condition&#39;) elif 3 == 3: print(&#39;second condition&#39;) else: print(&#39;None of the conditions&#39;) # the second condition is true . second condition . Variables . You can think of variables as words that store a value. That simple: . variable = 20 # defines that 20 will be stored in the &#39;variable&#39; word . variable # &quot;calling&quot; the variable . 20 . two = 2 word = &#39;words&#39; #defining more than one variable . age = 25 name = &#39;John&#39; . print(age,name) . 25 John . Format . print(&#39;My name is: {}, my age is: {}&#39;.format(name,age)) # With {} and .format () you replace text with variables: . My name is: John, my age is: 25 . print(f&#39;My name is: {name}, my age is: {age}&#39;) # you can also format a string with and f before it and the variables inside {} . My name is: John, my age is: 25 . It is also possible to create variables from the values of other variables: . x = 2 y = 3 . z = x + y #z is the sum of x and y, which can be any values (2 and 3 in this case). . z . 5 . Lists . [5,10,15] # lists are written with [] . [5, 10, 15] . [&#39;words&#39;,5,(5*5),name] # it is possible to store different types of data . [&#39;words&#39;, 5, 25, &#39;John&#39;] . You can add an item to the list: . my_list = [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] #a variable (my_list) that contains a list . my_list.append(&#39;d&#39;) #append adds an item to the list . my_list # the list after appending . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . my_list[0] #0 calls the list&#39;s first item . &#39;a&#39; . my_list[1] #1 calls the list&#39;s second item . &#39;b&#39; . my_list[1:] # What comes before the colon is the starting point of the selection. # In this case, the second item is selected until the last . [&#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . my_list[:2] # What comes after the colon is the arrival point of the selection. # In this case, it is selected from the first item to the third [2] . [&#39;a&#39;, &#39;b&#39;] . my_list[0] = &#39;NEW&#39; # replaces the element . my_list # list after replacing . [&#39;NEW&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;] . del my_list[2] # deletes the list&#39;s third item . my_list # list after the remotion . [&#39;NEW&#39;, &#39;b&#39;, &#39;d&#39;] . len(my_list) # checks the number of items in the list. . 3 . nested = [1,2,3,[4,5,[&#39;hello&#39;,&quot;guys&quot;]]] # It is possible to store lists within lists (nested list) # The [] within the list create other list . nested[3] # the fourth item on the nest list is also a list . [4, 5, [&#39;hello&#39;, &#39;guys&#39;]] . nested[3][2] # finds the element within the list stored in the &quot;nested&quot; list . [&#39;hello&#39;, &#39;guys&#39;] . nested[3][2][0] # finds the first element within the list that was stored within the &quot;nested&quot; list . &#39;hello&#39; . Dictionaries . d = {&#39;key1&#39;:&#39;item1&#39;,&#39;key2&#39;:&#39;item2&#39;} # dictionaries are created with {} and have keys and values . d # calling the dictionary . {&#39;key1&#39;: &#39;item1&#39;, &#39;key2&#39;: &#39;item2&#39;} . d[&#39;key1&#39;] # here we call the value stored in key1 . &#39;item1&#39; . d[&#39;key3&#39;]=&quot;item3&quot; # it is also possible to add keys and values to the dictionary, as in the example. . d # the dictionary after adding the key3 . {&#39;key1&#39;: &#39;item1&#39;, &#39;key2&#39;: &#39;item2&#39;, &#39;key3&#39;: &#39;item3&#39;} . Tuples . t = (1,2,3) # tuples are created with () and are immutable . t[0] . 1 . t[0] = &#39;NEW&#39; # it is not possible to change it, so an error will occur! . TypeError Traceback (most recent call last) &lt;ipython-input-70-9bfd67d608a2&gt; in &lt;module&gt; -&gt; 1 t[0] = &#39;NEW&#39; # it is not possible to change it, so an error will occur! TypeError: &#39;tuple&#39; object does not support item assignment . Loops - for: . my_list = [1,2,3,4,5,&quot;hello&quot;,&#39;world&#39;] # creating a new list with integers and strings . for item in my_list: # in this for loop, each item in the list is printed. print(item) . 1 2 3 4 5 hello world . for item in my_list: # in this for loop, for each recognized list item you are asked to print the word &quot;Looping&quot; print(&#39;Looping&#39;) . Looping Looping Looping Looping Looping Looping Looping . for i in my_list: #in this for loop, each element of the list is multiplied by 2. print(2*i) #It is important to realize the difference between the behavior of the operator with numbers and strings. . 2 4 6 8 10 hellohello worldworld . Loops - while . i = 1 while i &lt; 5: #as long as the requested condition is true (i less than 5), the loop will be executed. print(&#39;i is: {}&#39;.format(i)) i = i+1 . i is: 1 i is: 2 i is: 3 i is: 4 . i = 3 while i &lt; 7: # as long as the condition is true (i less than 7), print(&#39;i is: {}&#39;.format(i)) # the loop will be executed. i is updated at the end of the loop i = i+1 . i is: 3 i is: 4 i is: 5 i is: 6 . range() . range(0,5) #defines an intervalo . range(0, 5) . for i in range(0,5): # defines that the loop will be executed while i is within the range print(&quot;The number is: {} &quot;.format(i)) . The number is: 0 The number is: 1 The number is: 2 The number is: 3 The number is: 4 . list(range(2,7)) # turns the range into a list of values . [2, 3, 4, 5, 6] . List comprehension . x = [1,2,3,4] # creates a new list . out = [] # here a loop is created to raise the elements of list x to the power of 2. for item in x: out.append(item**2) print(out) . [1, 4, 9, 16] . [item**2 for item in x] # here we have a pythonic way to accomplish the same task, with just one line of code . [1, 4, 9, 16] . Functions . def my_func(phrase): #def is the word used to create the function. After that, print(phrase) #the function name comes and the parameters come inside the parenthesis. #In this case, we create a function that will print the sentence we want. . my_func(&quot;Hello World&quot;) #The phrase is &quot;Hello World&quot; . Hello World . my_func(&quot;I&#39;m in the Data Science Bootcamp&quot;) #With another phrase . I&#39;m in the Data Science Bootcamp . def multiply_by_2(x): #In this case, we create a function that multiplies by 2. return x*2 . result = multiply_by_2(5) # Applying the function to a number . result . 10 . word_2 = multiply_by_2(&#39;Hi &#39;) # It can be applied with strings too, but the behavior is different. word_2 . &#39;Hi Hi &#39; . def complex_function(x,y,z): #x,y,z are parameters s = x+y+z # the function creates the s variable m = x*y*z # the function creates the m variable print(&quot;The sum of x, y and z is: &quot;, s) # the function prints the results print(&quot;The multiplication of x, y and z is: &quot;, m) . complex_function(5,2,3) . The sum of x, y and z is: 10 The multiplication of x, y and z is: 30 . Classes and functions . class Person: #creates the class def __init__(self,name,age,profession): #initiates the class self.name=name #defines atributes self.age=age self.profession=profession def historic(self): #creates a method, a function designated specifically to the class created print(&quot;The object {} us {} years old and is a {}!&quot;.format(self.name,self.age,self.profession)) . soccer_player = Person(&quot;John&quot;,150,&quot;soccer_player&quot;) #creates an instance of the Person class journalist = Person(&quot;Mary&quot;,235,&quot;journalist&quot;) . soccer_player.age #shows one of the atributes . 150 . soccer_player.historic() #applies the created method to one of the instances . The object John us 150 years old and is a soccer_player! . journalist.historic() #applies the created method to one of the instances . The object Mary us 235 years old and is a journalist! . .",
            "url": "https://awarischool.github.io/ds-blog/python/2020/07/08/en-python-cheat-notebook.html",
            "relUrl": "/python/2020/07/08/en-python-cheat-notebook.html",
            "date": " • Jul 8, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://awarischool.github.io/ds-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://awarischool.github.io/ds-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}